# -*- coding: utf-8 -*-

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11CHYhy0czIAeW36u83vVixy9skHQd3uo
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
# %matplotlib inline

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

x_train2 = x_train.reshape(60000,784)
x_test2 = x_test.reshape(10000,784)

#Let's create the one-hot-encoded versions of our labels
y_train2 = keras.utils.to_categorical(y_train, num_classes=10)
y_test2 = keras.utils.to_categorical(y_test, num_classes=10)

# one hidden layer
model = keras.Sequential()
model.add(layers.Dense(units=1200, activation='relu',input_dim=784))
model.add(layers.Dense(units=1200, activation='relu'))
model.add(layers.Dense(units=10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='sgd',metrics=["accuracy"])

Early_Stop = keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=10, verbose=1, mode='auto')
history = model.fit(x_train2, y_train2, epochs=100, batch_size=128, verbose=1, validation_split = 0.2, callbacks=[Early_Stop])

yprobas = model.predict(x_test2, batch_size=128)
ypred = yprobas.argmax(axis=-1)
test_acc = np.mean(np.equal(ypred, y_test))
print('Test set accuracy:', test_acc)

# regularisation with dropout

model2 = keras.Sequential()
model2.add(layers.Dense(units=1200, activation='relu',input_dim=784))
model2.add(layers.Dense(units=1200, activation='relu'))
model2.add(layers.Dropout(0.2))
model2.add(layers.Dense(units=10, activation='softmax'))
model2.compile(loss='categorical_crossentropy', optimizer='sgd',metrics=["accuracy"])

Early_Stop = keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=10, verbose=1, mode='auto')
history = model2.fit(x_train2, y_train2, epochs=100, batch_size=128, verbose=1, validation_split = 0.2, callbacks=[Early_Stop])

yprobas = model2.predict(x_test2, batch_size=128)
ypred = yprobas.argmax(axis=-1)
test_acc = np.mean(np.equal(ypred, y_test))
print('Test set accuracy:', test_acc)

